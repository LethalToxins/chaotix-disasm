

;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2022 Hex-Rays, <support@hex-rays.com>           |
; |                Licensed to: <error retrieving user info>                |
; +-------------------------------------------------------------------------+
;
; Input MD5    : 4F166D52469F80DC1827FF3208D269D5
; Input CRC32  : B6802876

; ---------------------------------------------------------------------------
; File Name   : D:\VStudio-Programme\ASM68k\SoundDrvs\Chaotix_PWMDrv.bin
; Format      : Binary file
; Base Address: 0000h Range: C0000000h - C0000400h Loaded length: 0400h

; Processor       : SH2A
; Target assembler: SHASM Assembler
; Byte sex        : Big endian

; ===========================================================================

; Segment type: Regular
                .section RAM, UNK

PWMDriver:
                bra     PWMDrv_Init
                nop
; ---------------------------------------------------------------------------
                bra     PWMDrv_Update
                nop
; ---------------------------------------------------------------------------

PWMDrv_Init:                            ; CODE XREF: RAM:PWMDriver↑j
                mov.l   #h'AAAAAAAA, r0
                mov.l   #dword_C00001EC, r1
                mov.l   r0, @r1
                mov.l   #h'20004000, r1
                mov     #1, r0
                mov.w   r0, @(h'1C,r1)
                mov.b   r0, @(1,r1)
                mov.l   #h'20004030, r0
                mov.w   #h'105, r1
                mov.w   r1, @r0
                mov.l   #h'20004032, r0
                mov.w   #h'417, r1
                mov.w   r1, @r0
                mov.l   #h'20004034, r6
                mov.l   #h'20004036, r7
                mov     #0, r0
                mov.w   r0, @r6
                mov.w   r0, @r6
                mov.w   r0, @r6
                mov.w   r0, @r7
                mov.w   r0, @r7
                mov.w   r0, @r7
                rts
                nop
; ---------------------------------------------------------------------------
word_C0000038:  .data.w h'105           ; DATA XREF: RAM:C0000018↑r
word_C000003A:  .data.w h'417           ; DATA XREF: RAM:C000001E↑r
dword_C000003C: .data.l h'AAAAAAAA      ; DATA XREF: RAM:PWMDrv_Init↑r
dword_C0000040: .data.l h'C00001EC      ; DATA XREF: RAM:C000000A↑r
dword_C0000044: .data.l h'20004000      ; DATA XREF: RAM:C000000E↑r
dword_C0000048: .data.l h'20004030      ; DATA XREF: RAM:C0000016↑r
dword_C000004C: .data.l h'20004032      ; DATA XREF: RAM:C000001C↑r
dword_C0000050: .data.l h'20004034      ; DATA XREF: RAM:C0000022↑r
dword_C0000054: .data.l h'20004036      ; DATA XREF: RAM:C0000024↑r
; ---------------------------------------------------------------------------

PWMDrv_Update:                          ; CODE XREF: RAM:C0000004↑j
                mov.w   #h'FFFFFE10, r1
                mov.b   @(7,r1), r0
                xor     #2, r0
                mov.b   r0, @(7,r1)     ; XOr the byte at 0000 FFE17 with 02
                mov.l   #h'2000401C, r1
                mov.w   r0, @r1
                mov.l   #dword_C00001EC, r1 ; load value AAAA AAAA
                mov.l   @r1, r0
                rotr    r0
                bf/s    locret_C00000EE ; 5555 5555 - return (AAAA AAAA - continue)
                mov.l   r0, @r1
                mov.l   r2, @-r15       ; save registers to stack
                mov.l   r6, @-r15
                mov.l   r7, @-r15
                mov.l   r4, @-r15
                mov.l   r5, @-r15
                mov.l   r14, @-r15
                sts.l   pr, @-r15
                sts.l   macl, @-r15
                mov     #0, r4          ; initialize Final Data L 1
                mov     #0, r5          ; initialize Final Data R 2
                mov     #0, r6          ; initialize Final Data L 1
                mov     #0, r7          ; initialize Final Data R 2
                mov.l   #h'20004028, r1 ; r1 = Channel 1 Command
                mov.l   #dword_C00001F4, r14 ; r14 = Channel 1 RAM
                bsr     ProcChannel
                nop
                mov.l   #h'2000402A, r1 ; r1 = Channel 2 Command
                mov.l   #dword_C0000220, r14 ; r14 = Channel 2 RAM
                bsr     ProcChannel
                nop
                mov.l   #h'2000402C, r1 ; r1 = Channel 3 Command
                mov.l   #dword_C000024C, r14 ; r14 = Channel 3 RAM
                bsr     ProcChannel
                nop
                mov.l   #h'2000402E, r1 ; r1 = Channel 4 Command
                mov.l   #dword_C0000278, r14 ; r14 = Channel 4 RAM
                bsr     ProcChannel
                nop
                mov.w   #h'400, r1      ; all values: FC00..0400 -> 0000..0800
                xor     r1, r4
                xor     r1, r5
                xor     r1, r6
                xor     r1, r7
                mov.w   #h'7FF, r1      ; limit them to 0000..07FF
                and     r1, r4
                and     r1, r5
                and     r1, r6
                and     r1, r7
                mov.w   #h'200, r1      ; move base from 0400 to 0200
                sub     r1, r4
                sub     r1, r5
                sub     r1, r6
                sub     r1, r7
                mov.l   #h'20004034, r0 ; load PWM Lch Register
                mov.l   #h'20004036, r1 ; load PWM Rch Register
                lds.l   @r15+, macl     ; get registers from stack
                lds.l   @r15+, pr
                mov.l   @r15+, r14
                mov.w   r4, @r0         ; write left channel data
                mov.w   r5, @r1         ; write right channel data
                mov.l   @r15+, r5
                mov.l   @r15+, r4

loc_C00000D6:                           ; CODE XREF: RAM:C00000E2↓j
                mov.w   @r0, r2         ; read PWM LCh Status Register (can be 0000 [empty] or 8000 [full])
                cmp/pz  r2              ; Is positive?
                bt      loc_C00000E4    ; yes - jump
                mov     #h'18, r2

loc_C00000DE:                           ; CODE XREF: RAM:C00000E0↓j
                dt      r2              ; no - wait a few cycles ...
                bf      loc_C00000DE
                bt      loc_C00000D6    ; ... and try again

loc_C00000E4:                           ; CODE XREF: RAM:C00000DA↑j
                mov.w   r6, @r0         ; write left channel data
                mov.w   r7, @r1         ; write right channel data
                mov.l   @r15+, r7
                mov.l   @r15+, r6
                mov.l   @r15+, r2
; START OF FUNCTION CHUNK FOR ProcChannel

locret_C00000EE:                        ; CODE XREF: RAM:C000006A↑j
                                        ; ProcChannel+7C↓j
                rts
                nop
; END OF FUNCTION CHUNK FOR ProcChannel
; ---------------------------------------------------------------------------
word_C00000F2:  .data.w h'FE10          ; DATA XREF: RAM:PWMDrv_Update↑r
word_C00000F4:  .data.w h'400           ; DATA XREF: RAM:C00000A6↑r
word_C00000F6:  .data.w h'7FF           ; DATA XREF: RAM:C00000B0↑r
word_C00000F8:  .data.w h'200           ; DATA XREF: RAM:C00000BA↑r
                .align 4
dword_C00000FC: .data.l h'2000401C      ; DATA XREF: RAM:C0000060↑r
off_C0000100:   .data.l dword_C00001EC  ; DATA XREF: RAM:C0000064↑r
dword_C0000104: .data.l h'20004028      ; DATA XREF: RAM:C0000086↑r
off_C0000108:   .data.l dword_C00001F4  ; DATA XREF: RAM:C0000088↑r
dword_C000010C: .data.l h'2000402A      ; DATA XREF: RAM:C000008E↑r
off_C0000110:   .data.l dword_C0000220  ; DATA XREF: RAM:C0000090↑r
dword_C0000114: .data.l h'2000402C      ; DATA XREF: RAM:C0000096↑r
off_C0000118:   .data.l dword_C000024C  ; DATA XREF: RAM:C0000098↑r
dword_C000011C: .data.l h'2000402E      ; DATA XREF: RAM:C000009E↑r
off_C0000120:   .data.l dword_C0000278  ; DATA XREF: RAM:C00000A0↑r
dword_C0000124: .data.l h'20004034      ; DATA XREF: RAM:C00000C4↑r
dword_C0000128: .data.l h'20004036      ; DATA XREF: RAM:C00000C6↑r

; =============== S U B R O U T I N E =======================================


ProcChannel:                            ; CODE XREF: RAM:C000008A↑p
                                        ; RAM:C0000092↑p ...

; FUNCTION CHUNK AT C00000EE SIZE 00000004 BYTES

                mov.w   @r1, r2
                tst     r2, r2
                bt      loc_C0000174
                mov.w   @r1, r0
                cmp/eq  r2, r0
                bf      ProcChannel
                mov     #0, r0
                mov.w   r0, @r1
                extu.b  r2, r0
                mov.l   #dword_C00001F0, r1
                shll2   r0
                mov.l   @r1, r1
                shll2   r0
                add     r0, r1
                mov.l   @r1+, r0
                mov.l   r0, @(0,r14)
                mov.l   @r1+, r0
                mov.l   r0, @(4,r14)
                mov.l   r0, @(h'10,r14)
                mov.l   @r1+, r0
                mov.l   r0, @(8,r14)
                mov.l   @r1+, r0
                mov.l   r0, @(h'1C,r14)
                mov     #0, r0
                mov.l   r0, @(h'28,r14)
                swap.b  r2, r0
                shlr2   r0
                shlr    r0
                and     #h'1E, r0
                add     #2, r0
                mov.l   r0, @(h'14,r14)
                swap.b  r2, r0
                shll    r0
                and     #h'1E, r0
                add     #2, r0
                mov.l   r0, @(h'18,r14)

loc_C0000174:                           ; CODE XREF: ProcChannel+4↑j
                mov.l   @(h'28,r14), r0
                mov.l   @(h'1C,r14), r1
                mov.w   #h'800, r2
                add     r1, r0
                mov.l   r0, @(h'28,r14)
                cmp/hs  r2, r0
                bt      loc_C0000198
                mov.l   @(h'20,r14), r0
                mov.l   @(h'24,r14), r1
                add     r0, r4
                add     r0, r6
                add     r1, r5
                rts
                add     r1, r7
; ---------------------------------------------------------------------------
word_C0000190:  .data.w h'800           ; DATA XREF: ProcChannel+4C↑r
                .align 4
off_C0000194:   .data.l dword_C00001F0  ; DATA XREF: ProcChannel+12↑r
; ---------------------------------------------------------------------------

loc_C0000198:                           ; CODE XREF: ProcChannel+54↑j
                sub     r2, r0
                mov.l   r0, @(h'28,r14)
                mov.l   @(h'10,r14), r0
                mov.l   @(0,r14), r1
                dt      r0
                bf      loc_C00001AC
                mov.l   @(8,r14), r1
                tst     r1, r1
                bt      locret_C00000EE
                mov.l   @(h'C,r14), r0

loc_C00001AC:                           ; CODE XREF: ProcChannel+76↑j
                mov.b   @r1+, r2
                mov.l   r0, @(h'10,r14)
                mov.l   r1, @(0,r14)
                mov     #h'FFFFFF80, r0
                xor     r0, r2
                mov.l   @(h'14,r14), r1
                muls    r1, r2
                mov.l   @(h'20,r14), r1
                sts     macl, r0
                shar    r0
                shar    r0
                shar    r0
                shar    r0
                mov.l   r0, @(h'20,r14)
                add     r0, r6
                add     r1, r0
                shar    r0
                add     r0, r4
                mov.l   @(h'18,r14), r1
                muls    r1, r2
                mov.l   @(h'24,r14), r1
                sts     macl, r0
                shar    r0
                shar    r0
                shar    r0
                shar    r0
                mov.l   r0, @(h'24,r14)
                add     r0, r7
                add     r1, r0
                shar    r0
                rts
                add     r0, r5
; End of function ProcChannel

; ---------------------------------------------------------------------------
dword_C00001EC: .data.l h'AAAAAAAA      ; DATA XREF: RAM:C000000A↑o
                                        ; RAM:C0000064↑o ...
dword_C00001F0: .data.l h'22058000      ; DATA XREF: ProcChannel+12↑o
                                        ; ProcChannel:off_C0000194↑o
dword_C00001F4: .data.l 0, 1, 0, 0, 1, h'10, h'10, h'800, 0, 0, 0
                                        ; DATA XREF: RAM:C0000088↑o
                                        ; RAM:off_C0000108↑o
dword_C0000220: .data.l 0, 1, 0, 0, 1, h'10, h'10, h'800, 0, 0, 0
                                        ; DATA XREF: RAM:C0000090↑o
                                        ; RAM:off_C0000110↑o
dword_C000024C: .data.l 0, 1, 0, 0, 1, h'10, h'10, h'800, 0, 0, 0
                                        ; DATA XREF: RAM:C0000098↑o
                                        ; RAM:off_C0000118↑o
dword_C0000278: .data.l 0, 1, 0, 0, 1, h'10, h'10, h'800, 0, 0, 0
                                        ; DATA XREF: RAM:C00000A0↑o
                                        ; RAM:off_C0000120↑o
                .datab.b h'15C, h'FF
                .res.b h'C00

                .end ;
